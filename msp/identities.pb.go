// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msp/identities.proto

package msp

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SerializedIdentity_Type int32

const (
	SerializedIdentity_MSP       SerializedIdentity_Type = 0
	SerializedIdentity_EPHEMERAL SerializedIdentity_Type = 1
)

var SerializedIdentity_Type_name = map[int32]string{
	0: "MSP",
	1: "EPHEMERAL",
}

var SerializedIdentity_Type_value = map[string]int32{
	"MSP":       0,
	"EPHEMERAL": 1,
}

func (x SerializedIdentity_Type) String() string {
	return proto.EnumName(SerializedIdentity_Type_name, int32(x))
}

func (SerializedIdentity_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_872f7fc14bf2c238, []int{0, 0}
}

// This struct represents an Identity
// (with its MSP identifier) to be used
// to serialize it and deserialize it
type SerializedIdentity struct {
	// The identifier of the associated membership service provider
	Mspid string `protobuf:"bytes,1,opt,name=mspid,proto3" json:"mspid,omitempty"`
	// the Identity, serialized according to the rules of its MPS
	IdBytes              []byte                  `protobuf:"bytes,2,opt,name=id_bytes,json=idBytes,proto3" json:"id_bytes,omitempty"`
	Type                 SerializedIdentity_Type `protobuf:"varint,3,opt,name=type,proto3,enum=msp.SerializedIdentity_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SerializedIdentity) Reset()         { *m = SerializedIdentity{} }
func (m *SerializedIdentity) String() string { return proto.CompactTextString(m) }
func (*SerializedIdentity) ProtoMessage()    {}
func (*SerializedIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_872f7fc14bf2c238, []int{0}
}

func (m *SerializedIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerializedIdentity.Unmarshal(m, b)
}
func (m *SerializedIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerializedIdentity.Marshal(b, m, deterministic)
}
func (m *SerializedIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedIdentity.Merge(m, src)
}
func (m *SerializedIdentity) XXX_Size() int {
	return xxx_messageInfo_SerializedIdentity.Size(m)
}
func (m *SerializedIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedIdentity proto.InternalMessageInfo

func (m *SerializedIdentity) GetMspid() string {
	if m != nil {
		return m.Mspid
	}
	return ""
}

func (m *SerializedIdentity) GetIdBytes() []byte {
	if m != nil {
		return m.IdBytes
	}
	return nil
}

func (m *SerializedIdentity) GetType() SerializedIdentity_Type {
	if m != nil {
		return m.Type
	}
	return SerializedIdentity_MSP
}

type EphemeralIdentity struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Expansion            []byte   `protobuf:"bytes,2,opt,name=expansion,proto3" json:"expansion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EphemeralIdentity) Reset()         { *m = EphemeralIdentity{} }
func (m *EphemeralIdentity) String() string { return proto.CompactTextString(m) }
func (*EphemeralIdentity) ProtoMessage()    {}
func (*EphemeralIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_872f7fc14bf2c238, []int{1}
}

func (m *EphemeralIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EphemeralIdentity.Unmarshal(m, b)
}
func (m *EphemeralIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EphemeralIdentity.Marshal(b, m, deterministic)
}
func (m *EphemeralIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralIdentity.Merge(m, src)
}
func (m *EphemeralIdentity) XXX_Size() int {
	return xxx_messageInfo_EphemeralIdentity.Size(m)
}
func (m *EphemeralIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralIdentity proto.InternalMessageInfo

func (m *EphemeralIdentity) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *EphemeralIdentity) GetExpansion() []byte {
	if m != nil {
		return m.Expansion
	}
	return nil
}

// This struct represents an Idemix Identity
// to be used to serialize it and deserialize it.
// The IdemixMSP will first serialize an idemix identity to bytes using
// this proto, and then uses these bytes as id_bytes in SerializedIdentity
type SerializedIdemixIdentity struct {
	// nym_x is the X-component of the pseudonym elliptic curve point.
	// It is a []byte representation of an amcl.BIG
	// The pseudonym can be seen as a public key of the identity, it is used to verify signatures.
	NymX []byte `protobuf:"bytes,1,opt,name=nym_x,json=nymX,proto3" json:"nym_x,omitempty"`
	// nym_y is the Y-component of the pseudonym elliptic curve point.
	// It is a []byte representation of an amcl.BIG
	// The pseudonym can be seen as a public key of the identity, it is used to verify signatures.
	NymY []byte `protobuf:"bytes,2,opt,name=nym_y,json=nymY,proto3" json:"nym_y,omitempty"`
	// ou contains the organizational unit of the idemix identity
	Ou []byte `protobuf:"bytes,3,opt,name=ou,proto3" json:"ou,omitempty"`
	// role contains the role of this identity (e.g., ADMIN or MEMBER)
	Role []byte `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// proof contains the cryptographic evidence that this identity is valid
	Proof                []byte   `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerializedIdemixIdentity) Reset()         { *m = SerializedIdemixIdentity{} }
func (m *SerializedIdemixIdentity) String() string { return proto.CompactTextString(m) }
func (*SerializedIdemixIdentity) ProtoMessage()    {}
func (*SerializedIdemixIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_872f7fc14bf2c238, []int{2}
}

func (m *SerializedIdemixIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerializedIdemixIdentity.Unmarshal(m, b)
}
func (m *SerializedIdemixIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerializedIdemixIdentity.Marshal(b, m, deterministic)
}
func (m *SerializedIdemixIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedIdemixIdentity.Merge(m, src)
}
func (m *SerializedIdemixIdentity) XXX_Size() int {
	return xxx_messageInfo_SerializedIdemixIdentity.Size(m)
}
func (m *SerializedIdemixIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedIdemixIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedIdemixIdentity proto.InternalMessageInfo

func (m *SerializedIdemixIdentity) GetNymX() []byte {
	if m != nil {
		return m.NymX
	}
	return nil
}

func (m *SerializedIdemixIdentity) GetNymY() []byte {
	if m != nil {
		return m.NymY
	}
	return nil
}

func (m *SerializedIdemixIdentity) GetOu() []byte {
	if m != nil {
		return m.Ou
	}
	return nil
}

func (m *SerializedIdemixIdentity) GetRole() []byte {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *SerializedIdemixIdentity) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterEnum("msp.SerializedIdentity_Type", SerializedIdentity_Type_name, SerializedIdentity_Type_value)
	proto.RegisterType((*SerializedIdentity)(nil), "msp.SerializedIdentity")
	proto.RegisterType((*EphemeralIdentity)(nil), "msp.EphemeralIdentity")
	proto.RegisterType((*SerializedIdemixIdentity)(nil), "msp.SerializedIdemixIdentity")
}

func init() { proto.RegisterFile("msp/identities.proto", fileDescriptor_872f7fc14bf2c238) }

var fileDescriptor_872f7fc14bf2c238 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xff, 0xb4, 0xe9, 0x5f, 0x73, 0xa9, 0xa5, 0x8e, 0x5d, 0x44, 0xa8, 0xa2, 0x59, 0x09,
	0xd2, 0x89, 0xe8, 0x13, 0x58, 0x08, 0x28, 0x5a, 0x08, 0xa9, 0x0b, 0x75, 0x53, 0x92, 0xe6, 0x36,
	0x1d, 0x4c, 0x32, 0x61, 0x92, 0x42, 0xc7, 0x85, 0xaf, 0xe1, 0xeb, 0x3a, 0xc9, 0xd4, 0xaa, 0xb8,
	0x9b, 0x73, 0xee, 0x97, 0xc3, 0xb9, 0x37, 0x30, 0xcc, 0xca, 0xc2, 0x65, 0x31, 0xe6, 0x15, 0xab,
	0x18, 0x96, 0xb4, 0x10, 0xbc, 0xe2, 0xa4, 0xad, 0x5c, 0xe7, 0xc3, 0x00, 0x32, 0x43, 0xc1, 0xc2,
	0x94, 0xbd, 0x61, 0x7c, 0xa7, 0x19, 0x49, 0x86, 0xd0, 0x51, 0x53, 0x16, 0xdb, 0xc6, 0xa9, 0x71,
	0x6e, 0x05, 0x5a, 0x90, 0x23, 0xd8, 0x63, 0xf1, 0x3c, 0x92, 0x15, 0x96, 0x76, 0x4b, 0x0d, 0x7a,
	0x41, 0x97, 0xc5, 0x93, 0x5a, 0x92, 0x4b, 0x30, 0x2b, 0x59, 0xa0, 0xdd, 0x56, 0x76, 0xff, 0x6a,
	0x44, 0xd5, 0x07, 0xf4, 0x6f, 0x2e, 0x7d, 0x54, 0x4c, 0xd0, 0x90, 0xce, 0x09, 0x98, 0xb5, 0x22,
	0x5d, 0x68, 0x4f, 0x67, 0xfe, 0xe0, 0x1f, 0xd9, 0x07, 0xcb, 0xf3, 0x6f, 0xbd, 0xa9, 0x17, 0xdc,
	0x3c, 0x0c, 0x0c, 0xc7, 0x87, 0x03, 0xaf, 0x58, 0x61, 0x86, 0x22, 0x4c, 0x77, 0xbd, 0x8e, 0x01,
	0x8a, 0x75, 0x94, 0xb2, 0xc5, 0xfc, 0x15, 0x65, 0x53, 0xae, 0x17, 0x58, 0xda, 0xb9, 0x47, 0x49,
	0x46, 0x60, 0xe1, 0xa6, 0x08, 0xf3, 0x92, 0xf1, 0x7c, 0xdb, 0xf0, 0xdb, 0x70, 0xde, 0xc1, 0xfe,
	0x55, 0x29, 0x63, 0x9b, 0x5d, 0xf0, 0x21, 0x74, 0x72, 0x99, 0xcd, 0x37, 0xdb, 0x4c, 0x53, 0x89,
	0xa7, 0x2f, 0x53, 0x6e, 0xa3, 0x6a, 0xf3, 0x99, 0xf4, 0xa1, 0xc5, 0xd7, 0xcd, 0x9e, 0xbd, 0x40,
	0xbd, 0x08, 0x01, 0x53, 0xf0, 0x14, 0x6d, 0x53, 0x33, 0xf5, 0xbb, 0x3e, 0x9f, 0xba, 0x31, 0x5f,
	0xda, 0x9d, 0xc6, 0xd4, 0x62, 0xe2, 0xc3, 0x19, 0x17, 0x09, 0x5d, 0xa9, 0xad, 0x45, 0x8a, 0x71,
	0x82, 0x82, 0x2e, 0xc3, 0x48, 0xb0, 0x85, 0xfe, 0x21, 0x65, 0x7d, 0xb4, 0x97, 0x8b, 0x84, 0x55,
	0xab, 0x75, 0x44, 0x17, 0x3c, 0x73, 0x7f, 0x90, 0xae, 0x26, 0xc7, 0x9a, 0x1c, 0x27, 0xdc, 0x55,
	0x70, 0xf4, 0xbf, 0x91, 0xd7, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x45, 0x90, 0xc7, 0xe1,
	0x01, 0x00, 0x00,
}
